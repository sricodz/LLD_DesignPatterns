Parking Lot System: Comprehensive Design Summary
1. Requirements:
Vehicle Types:

Car, Bike, Truck (future extension for other types).

Each vehicle can be electric or non-electric and may also be large-sized or regular-sized.

Parking Slots:

Parking slots vary based on the type of vehicle they can accommodate:

Electric Slots: For electric vehicles.

Large Slots: For larger vehicles like trucks.

Regular Slots: For standard vehicles.

Slots can be located near the entrance or elevator for convenience.

Parking Floors:

The parking lot consists of multiple floors, each having multiple slots.

Entry/Exit Management:

Tickets are generated when a vehicle enters.

Slot Assignment is based on vehicle type, availability, and user preference (e.g., near the entrance or elevator).

Vehicles are charged based on the duration of their stay (calculated by minutes).

Payment Methods:

Support different payment methods: Cash, Card, and Online.

Future Extensions:

Ability to add more vehicle types and payment methods.

2. Classes and Object Creation
The system is designed with multiple classes to represent different entities and handle interactions efficiently. Let's break them down:

1. Vehicle Classes:
Vehicle (abstract class)

Car (extends Vehicle)

Bike (extends Vehicle)

Truck (extends Vehicle)

These classes represent different types of vehicles that can park in the lot. Each vehicle type may have specific properties like size or type (electric/non-electric).

2. Parking Slot:
ParkingSlot (Represents a single parking space)

Properties:

Slot ID (e.g., "A1")

Slot type (Electric, Large, Regular)

Position (Near entrance or elevator)

Occupied status (Is the slot occupied or free)

SlotSelector (Strategy Interface)

Selects parking slots based on user preferences (e.g., NearEntranceSelector, NearElevatorSelector).

3. Parking Floor:
ParkingFloor (Contains multiple slots on a particular floor)

Properties:

Floor ID (e.g., "1st Floor")

List of parking slots (e.g., List<ParkingSlot>)

4. Ticketing System:
Ticket (Represents a parking ticket for a vehicle)

Properties:

Ticket ID

Vehicle (the vehicle assigned to the ticket)

Entry Time (When the vehicle enters the parking lot)

Assigned Slot (Which parking slot the vehicle occupies)

Exit Time (When the vehicle leaves)

EntryExitSystem (Manages vehicle entry and exit logic)

Handles ticket generation, slot assignment, and payment processing after vehicle exit.

5. Payment System:
PaymentStrategy (Interface for various payment methods)

CashPayment

CardPayment

OnlinePayment

PaymentProcessor (Handles the payment processing)

Receives the payment method and processes the payment.

3. Class Relations:
The system is organized into multiple related components:

Vehicle and Slot Relationship:

Each Vehicle object is assigned to a ParkingSlot.

A ParkingSlot has a type (Electric, Large, Regular) and may have specific locations (near entrance or elevator).

Ticket and Slot Relationship:

A Ticket is associated with one ParkingSlot and one Vehicle.

The Ticket records entry time, assigned slot, and exit time.

EntryExitSystem and Ticketing:

EntryExitSystem is responsible for issuing Tickets when a vehicle enters the parking lot and calculating the parking fee when a vehicle exits.

The EntryExitSystem will also invoke the PaymentProcessor after calculating the fee, which in turn uses a specific PaymentStrategy (cash, card, or online) to process the payment.

Payment System Integration:

The EntryExitSystem communicates with the PaymentProcessor to handle payments based on the chosen PaymentStrategy.

Slot Selection Strategy:

The SlotSelector interface allows for dynamic slot selection based on user preferences. SlotSelector has different implementations like NearEntranceSelector and NearElevatorSelector, enabling flexible parking space assignment based on availability and user requests.

4. Design Patterns Used:
1. Strategy Pattern (Slot Selection and Payment Methods):
Purpose: The Strategy pattern allows the parking lot system to select different strategies for slot selection and payment processing without modifying the core system.

Usage:

Slot Selection: The SlotSelector interface allows for dynamic selection of parking slots based on the user’s preference (e.g., NearEntranceSelector or NearElevatorSelector). The strategy can be easily extended to add new slot selection criteria (e.g., NearChargingStationSelector).

Payment Method: The PaymentStrategy interface allows for different payment methods like CashPayment, CardPayment, and OnlinePayment. The payment method can be changed dynamically based on the user's choice, and new payment methods can be added in the future.

Why Used:

To ensure that the parking lot system can flexibly switch between different slot assignment criteria and payment methods without introducing tight coupling between the components.

2. Factory Pattern (Parking Slot and Vehicle Creation):
Purpose: The Factory pattern is used to create different types of objects (vehicles, parking slots) based on user input or preferences without exposing the creation logic.

Usage:

Vehicle Factory: The creation of Car, Bike, and Truck objects is abstracted so that the system can easily handle future vehicle types without changing the logic.

Parking Slot Factory: A factory could be used to create parking slots based on vehicle types (e.g., Electric or Large) and their specific location preferences (near entrance or near elevator).

Why Used:

Helps in centralizing object creation logic and makes the code more maintainable by decoupling object creation from business logic.

3. Observer Pattern (Parking Slot Availability Notifications):
Purpose: The Observer pattern allows the system to notify users (observers) when a parking slot becomes available.

Usage:

A ParkingSlot could notify interested parties (e.g., mobile apps or user interfaces) when it becomes free.

This can also be extended to send notifications for low availability or full parking lot status.

Why Used:

To notify users of slot availability in real-time, enhancing user experience and keeping the system decoupled.

5. Textual Class Diagrams Overview
Below is a textual representation of the class relationships and flow.

markdown
Copy
Edit
1. Vehicle (abstract class)
   - Car, Bike, Truck (Concrete classes)

2. ParkingSlot
   - Attributes: slotId, type, position, occupiedStatus
   - Methods: occupySlot(), freeSlot()

3. ParkingFloor
   - Attributes: floorId, List<ParkingSlot>
   - Methods: getAvailableSlots(), assignSlot()

4. Ticket
   - Attributes: ticketId, entryTime, exitTime, vehicle, assignedSlot
   - Methods: setExitTime(), getDuration(), calculateFee()

5. SlotSelector (Interface)
   - Methods: selectSlot()

   - Concrete Implementations: 
     - NearEntranceSelector
     - NearElevatorSelector

6. EntryExitSystem
   - Attributes: parkingLot
   - Methods: vehicleEntry(), vehicleExit()

7. PaymentStrategy (Interface)
   - Methods: processPayment()

   - Concrete Implementations: 
     - CashPayment
     - CardPayment
     - OnlinePayment

8. PaymentProcessor
   - Attributes: paymentStrategy
   - Methods: processPayment()
6. Conclusion:
In summary, we’ve designed a Parking Lot System that:

Handles different types of vehicles.

Manages parking slots and floors.

Issues tickets and calculates fees based on parking time.

Provides multiple payment methods via Strategy Pattern (Cash, Card, Online).

Allows flexible slot selection based on user preferences using the Strategy Pattern.

Utilizes the Factory Pattern for object creation and Observer Pattern for slot availability notifications.

This system is easily extensible, loosely coupled, and adaptable to new requirements and technologies in the future.
